{
  "name": "llm-prompt-scaffold",
  "displayName": "LLM Prompt Scaffold",
  "description": "Generates project structure and aggregate code file from selected file context.",
  "version": "0.0.1",
  "publisher": "abcdevco",
  "repository": {
    "type": "git",
    "url": "https://github.com/Memeticode/llm-prompt-scaffold.git"
  },
  "engines": {
    "vscode": "^1.91.0"
  },
  "categories": [
    "Other"
  ],
  "icon": "media/icon.png",
  "activationEvents": [
    "workspaceContains:**/*",
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "title": "LLM Prompt Scaffold",
      "properties": {
        "llmPromptScaffold.extensionStorageDirectory": {
          "type": "string",
          "default": ".llm-prompt-scaffold",
          "description": "The name of the directory used for storing extension data. You probably won't need to change this, but it may be necessary if you have an existing folder named '.llm-prompt-scaffold' in your project. The extension creates a folder with this name in each workspace folder. Changing this at the user level will cause new workspaces to use the new name by default, but will not change the folder in any existing workspaces. Changing this at the workspace level will update the storage folder names in the current workspace.",
          "scope": "window"
        },
        "llmPromptScaffold.systemPromptDefaultPath": {
          "type": "string",
          "default": "",
          "description": "(NOT IMPLEMENTED) To change the default system prompt, write your desired prompt in a text file and input the path here (will use existing default if left blank). If the extension can read the specified file, it will load that as the default prompt. If not, it will provide a warning message and use the default default system prompt. Refresh the prompt configuration to apply changes. Workspace-level settings will override user-level settings.",
          "scope": "window"
        },
        "llmPromptScaffold.fileContextStructureIncludeDefaultPath": {
          "type": "string",
          "default": "",
          "description": "(NOT IMPLEMENTED) To change the default file context structure inclusion rules, write the inclusion rules as a 'reverse .gitignore' file and input the path here (will use existing default if left blank). If the extension can read the specified file, it will load that as the default inclusion instruction. If not, it will provide a warning message and use the default default inclusion rules. Refresh the prompt configuration to apply changes. Workspace-level settings will override user-level settings.",
          "scope": "window"
        },
        "llmPromptScaffold.fileContextStructureExcludeDefaultPath": {
          "type": "string",
          "default": "",
          "description": "(NOT IMPLEMENTED) To change the default file context structure exclusion rules, write the exclusion rules as a '.gitignore' file and input the path here (will use existing default if left blank). If the extension can read the specified file, it will load that as the default inclusion instruction. If not, it will provide a warning message and use the extension default exclusion rules. Refresh the prompt configuration to apply changes. Workspace-level settings will override user-level settings.",
          "scope": "window"
        },
        "llmPromptScaffold.fileContextContentIncludeDefaultPath": {
          "type": "string",
          "default": "",
          "description": "(NOT IMPLEMENTED) To change the default file context content inclusion rules, write the inclusion rules as a 'reverse .gitignore' file and input the path here (will use existing default if left blank). If the extension can read the specified file, it will load that as the default inclusion instruction. If not, it will provide a warning message and use the default content inclusion rules. Refresh the prompt configuration to apply changes. Workspace-level settings will override user-level settings.",
          "scope": "window"
        },
        "llmPromptScaffold.fileContextContentExcludeDefaultPath": {
          "type": "string",
          "default": "",
          "description": "(NOT IMPLEMENTED) To change the default file context content exclusion rules, write the exclusion rules as a '.gitignore' file and input the path here (will use existing default if left blank). If the extension can read the specified file, it will load that as the default exclusion instruction. If not, it will provide a warning message and use the extension default content exclusion rules. Refresh the prompt configuration to apply changes. Workspace-level settings will override user-level settings.",
          "scope": "window"
        }
      }
    },
    "commands": [
      {
        "command": "llmPromptScaffold.reloadPromptConfigurationContent",
        "title": "LLM Prompt Scaffold: Reloads Prompt Configuration",
        "description": "Reloads content in the 'Prompt Configuration' sidebar window (replaces any existing content with default content)",
        "icon": "$(refresh)"
      },
      {
        "command": "llmPromptScaffold.initializeWorkspaceStorageFolders",
        "title": "Initialize/Refresh Prompt Scaffold Workspace Storage Folders"
      },
      {
        "command": "llmPromptScaffold.refreshFileStructureContext",
        "title": "Refresh File Structure Context",
        "icon": "$(refresh)"
      },
      {
        "command": "llmPromptScaffold.openProjectInfoFile",
        "title": "Opens Project Info File in Editor"
      },
      {
        "command": "llmPromptScaffold.generatePromptOutFiles",
        "title": "Refresh Prompt Output Files",
        "description": "(Re)generate all prompt output files",
        "icon": "$(refresh)"
      },
      {
        "command": "llmPromptScaffold.openPromptOutFile",
        "title": "Open Prompt Output File",
        "icon": "$(folder-opened)"
      },
      {
        "command": "llmPromptScaffold.openPromptOutFolder",
        "title": "Open System Folder",
        "description": "Open the system folder containing prompt output files",
        "icon": "$(folder-opened)"
      },
      {
        "command": "llmPromptScaffold.currentFileContextExpandAll",
        "title": "Expand All",
        "description": "Fully expand the current file context",
        "icon": "$(expand-all)"
      },
      {
        "command": "llmPromptScaffold.currentFileContextCollapseAll",
        "title": "Collapse All",
        "description": "Collapse the current file context",
        "icon": "$(collapse-all)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "project-sidebar",
          "title": "LLM Prompt Scaffold",
          "icon": "media/icon.png"
        }
      ]
    },
    "views": {
      "project-sidebar": [
        {
          "id": "promptConfigurationView",
          "name": "Prompt Configuration",
          "description": "View and edit prompt configuration information",
          "type": "tree"
        },
        {
          "id": "fileStructureContextView",
          "name": "File Structure Context",
          "type": "tree",
          "description": "Displays files which will be included in file structure context."
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "llmPromptScaffold.refreshFileStructureContext",
          "when": "view == fileStructureContextView",
          "group": "navigation"
        },
        {
          "command": "llmPromptScaffold.generatePromptOutFiles",
          "when": "view == sidebar-out-files",
          "group": "navigation"
        },
        {
          "command": "llmPromptScaffold.openPromptOutFolder",
          "when": "view == sidebar-out-files",
          "group": "navigation"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "overrides": {
    "inflight": "npm:lru-cache@^7.0.0",
    "glob": "^9.0.0"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.7",
    "@types/node": "20.x",
    "@types/vscode": "^1.91.0",
    "@typescript-eslint/eslint-plugin": "^7.17.0",
    "@typescript-eslint/parser": "^7.17.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "esbuild": "^0.23.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.5.4"
  },
  "dependencies": {
    "ignore": "^5.3.1"
  }
}